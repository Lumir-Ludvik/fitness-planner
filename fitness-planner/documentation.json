{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiBasePath",
            "id": "interface-ApiBasePath-6abc2603d2f762c53dc059e80e3d88ba4da81e0ba14117caf195bc26035931bc655f3ef7027eb0d7ead88624e6e23dc78c21f88e35a098dc0b4af8530fda6148",
            "file": "src/app/api/endpoints.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Guid } from \"guid-typescript\";\n\nconst API_URL = \"https://localhost:44323/api\";\n\nexport interface ApiBasePath {\n  get: (id: Guid) => string;\n  create: () => string;\n  delete: (id: Guid) => string;\n  add: () => string;\n  getAll: () => string;\n  update: () => string;\n}\n\nexport const ApiModulePath: ApiBasePath = {\n  get: (id: Guid) => `${API_URL}/Module/${id}`,\n  create: () => `${API_URL}/Module`,\n  delete: (id: Guid) => `${API_URL}/Module/${id}`,\n  add: () => `${API_URL}/Module`,\n  getAll: () => `${API_URL}/Module`,\n  update: () => `${API_URL}/Module`\n};\n\nexport const ApiCalendarPath: ApiBasePath = {\n  get: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  create: () => `${API_URL}/Calendar`,\n  delete: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  add: () => `${API_URL}/Calendar`,\n  getAll: () => `${API_URL}/Calendar`,\n  update: () => `${API_URL}/Calendar`\n};\n",
            "properties": [
                {
                    "name": "add",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "create",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "delete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "get",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "getAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "update",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "CalendarApiService",
            "id": "injectable-CalendarApiService-c93fe54ef10f8492e928d75291865eda50e8af43c29e635777e895ff3f313bba5ef513212357a72d1cef4d981ad58e0fd8ce9fa0f2be941f6668148a61fcd493",
            "file": "src/app/api/services/calendar.api.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ApiCalendarPath } from \"../endpoints\";\nimport { BaseApiService } from \"./base.api.service\";\n\n@Injectable()\nexport class CalendarApiService extends BaseApiService<typeof ApiCalendarPath> {\n  constructor() {\n    super(ApiCalendarPath);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "FitnessPlanState",
            "id": "injectable-FitnessPlanState-8748064471419c78b4ccaee501762518cb75f2a5612746490eb6233e79253bc2fed6c7172dcd41d78238ec3945dffff5e48c5ea4d914451b24eb60c143dbe924",
            "file": "src/app/states/state/fitness-plan-state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addModule",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AddModule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddModule"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AddModule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "apiErrorResponse",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "APIErrorResponse"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "apiSuccessResponse",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "APISuccessResponse<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "APISuccessResponse"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "APISuccessResponse<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteModule",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DeleteModule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DeleteModule"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DeleteModule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCalendarData",
                    "args": [
                        {
                            "name": "state",
                            "type": "FitnessPlanStateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['FitnessPlanState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FitnessPlanStateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFitnessPlanData",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "GetFitnessPlanData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetFitnessPlanData"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "GetFitnessPlanData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModules",
                    "args": [
                        {
                            "name": "state",
                            "type": "FitnessPlanStateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['FitnessPlanState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FitnessPlanStateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCalendarData",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RemoveCalendarData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemoveCalendarData"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RemoveCalendarData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCalendarData",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "SetCalendarData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetCalendarData"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "SetCalendarData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModule",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "UpdateModule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateModule"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<FitnessPlanStateType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "UpdateModule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\nimport {\n  FitnessPlanStateType,\n  Module,\n  ModuleBE\n} from \"../../models/plan/types\";\nimport {\n  AddModule,\n  APIErrorResponse,\n  APISuccessResponse,\n  DeleteModule,\n  GetFitnessPlanData,\n  RemoveCalendarData,\n  SetCalendarData,\n  UpdateModule\n} from \"../actions/fitness-plan-state-actions\";\nimport { b64toBlob, blobToBase64 } from \"../../utils/img-utils\";\nimport { TEST_IMAGE } from \"../../testing/mocks/test-image-base64\";\nimport { forkJoin } from \"rxjs\";\nimport { ModuleApiService } from \"../../api/services/module.api.service\";\nimport { CalendarApiService } from \"../../api/services/calendar.api.service\";\nimport { Guid } from \"guid-typescript\";\n\n@State<FitnessPlanStateType>({\n  name: \"FitnessPlan\",\n  defaults: {\n    modules: [\n      {\n        id: Guid.create(),\n        image: { data: b64toBlob(TEST_IMAGE), filename: \"big-biceps\" },\n        title: \"I the big biceps\",\n        text: \"I wish I was a big biceps\"\n      }\n    ],\n    calendarData: {\n      Monday: [],\n      Tuesday: [],\n      Wednesday: [],\n      Thursday: [],\n      Friday: [],\n      Saturday: [],\n      Sunday: []\n    }\n  }\n})\n@Injectable()\nexport class FitnessPlanState {\n  constructor(\n    private readonly moduleApiService: ModuleApiService,\n    private readonly calendarApiService: CalendarApiService\n  ) {}\n\n  @Selector([FitnessPlanState])\n  public static getModules(state: FitnessPlanStateType) {\n    return state.modules;\n  }\n\n  @Selector([FitnessPlanState])\n  public static getCalendarData(state: FitnessPlanStateType) {\n    return state.calendarData;\n  }\n\n  @Action(GetFitnessPlanData)\n  public getFitnessPlanData(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: GetFitnessPlanData\n  ) {\n    forkJoin([\n      this.moduleApiService.getAll(),\n      this.calendarApiService.getAll()\n    ]).subscribe({\n      next: (data: [modules: Module[], monday: Module[]]) => {\n        debugger;\n        ctx.setState({\n          modules: data[0],\n          calendarData: {\n            //TODO: fix API add mapping and services\n            Monday: data[1],\n            Tuesday: data[1],\n            Wednesday: data[1],\n            Thursday: data[1],\n            Friday: data[1],\n            Saturday: data[1],\n            Sunday: data[1]\n          }\n        });\n      },\n      error: err => console.error(err)\n    });\n  }\n\n  @Action(APISuccessResponse)\n  public apiSuccessResponse(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: APISuccessResponse<FitnessPlanStateType>\n  ) {\n    ctx.setState(action.data);\n  }\n\n  @Action(APIErrorResponse)\n  public apiErrorResponse(ctx: StateContext<FitnessPlanStateType>) {\n    //TODO: error handling\n    ctx.setState(null);\n  }\n\n  @Action(AddModule)\n  public async addModule(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: AddModule\n  ) {\n    const state = ctx.getState();\n\n    //TODO: add mapping on API side\n    const nextModule: ModuleBE = {\n      id: action.module.id,\n      text: action.module.text,\n      title: action.module.title,\n      filename: action.module.image.filename,\n      base64Img: await blobToBase64(action.module.image.data),\n      //TODO: add content type\n      contentType: \"image/png\"\n    };\n\n    this.moduleApiService.add(nextModule).subscribe({\n      next: (nextModule: Module) => {\n        ctx.setState({\n          ...state,\n          //TODO: add API mapping\n          modules: [...state.modules, action.module]\n        });\n      },\n      error: err => console.error(err)\n    });\n  }\n\n  @Action(DeleteModule)\n  public deleteModule(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: DeleteModule\n  ) {\n    const state = ctx.getState();\n\n    this.moduleApiService.delete(action.id);\n\n    ctx.setState({\n      ...state,\n      modules: state.modules.filter(module => module.id !== action.id)\n    });\n  }\n\n  @Action(UpdateModule)\n  public async updateModule(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: UpdateModule\n  ) {\n    const state = ctx.getState();\n    const moduleIndex = state.modules.findIndex(\n      module => module.id === action.nextModule.id\n    );\n\n    if (moduleIndex === -1) {\n      return;\n    }\n\n    const nextModules = [...state.modules];\n    nextModules[moduleIndex] = action.nextModule;\n    //TODO: add mapping on API side\n    const nextModule: ModuleBE = {\n      id: action.nextModule.id,\n      text: action.nextModule.text,\n      title: action.nextModule.title,\n      filename: action.nextModule.image.filename,\n      base64Img: await blobToBase64(action.nextModule.image.data),\n      //TODO: add content type\n      contentType: \"image/png\"\n    };\n    this.moduleApiService.update(nextModule);\n\n    ctx.setState({\n      ...state,\n      modules: nextModules\n    });\n  }\n\n  @Action(SetCalendarData)\n  public setCalendarData(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: SetCalendarData\n  ) {\n    const state = ctx.getState();\n\n    const nextCalendar = { ...state.calendarData };\n    nextCalendar[action.day] = [...nextCalendar[action.day], action.module];\n\n    //TODO: API handle day\n\n    ctx.setState({\n      ...state,\n      calendarData: nextCalendar\n    });\n  }\n\n  @Action(RemoveCalendarData)\n  public removeCalendarData(\n    ctx: StateContext<FitnessPlanStateType>,\n    action: RemoveCalendarData\n  ) {\n    const state = ctx.getState();\n    const nextCalendarData = { ...state.calendarData };\n\n    nextCalendarData[action.day] = nextCalendarData[action.day].filter(\n      module => module.id !== action.id\n    );\n    //TODO: API hande day\n\n    ctx.setState({\n      ...state,\n      calendarData: nextCalendarData\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "moduleApiService",
                        "type": "ModuleApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calendarApiService",
                        "type": "CalendarApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "moduleApiService",
                        "type": "ModuleApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calendarApiService",
                        "type": "CalendarApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModuleApiService",
            "id": "injectable-ModuleApiService-13a8d0ff22aaf645aa3e16a6159230d1c0949590ed7a2e3463701b11062cbc68e7029c3db5dee844c1c556746754c44efa09e62507e915d4e228bfe21ea198da",
            "file": "src/app/api/services/module.api.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ApiModulePath } from \"../endpoints\";\nimport { BaseApiService } from \"./base.api.service\";\n\n@Injectable()\nexport class ModuleApiService extends BaseApiService<typeof ApiModulePath> {\n  constructor() {\n    super(ApiModulePath);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "ModuleService",
            "id": "injectable-ModuleService-971eef75e1d2808e96848906572e9a6dd9060b6b837a93a63e2426f80d05ff05aebd6c314b1270bc1dd42e4f22a2eefcad9cea2973b6a6c88d5279b8140ea00e",
            "file": "src/app/plan/services/module.service.ts",
            "properties": [
                {
                    "name": "addModule",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "CalendarData",
                    "defaultValue": "signal<CalendarDataType>({\r\n    Monday: [],\r\n    Tuesday: [],\r\n    Wednesday: [],\r\n    Thursday: [],\r\n    Friday: [],\r\n    Saturday: [],\r\n    Sunday: []\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deleteModule",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getCalendarData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getModules",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modules",
                    "defaultValue": "signal<Module[]>([\r\n    {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      //@ts-ignore\r\n      id: Guid.create().value,\r\n      image: { data: b64toBlob(TEST_IMAGE), filename: \"big-biceps\" },\r\n      title: \"I the big biceps\",\r\n      text: \"I wish I was a big biceps\"\r\n    }\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeCalendarData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setCalendarData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "updateModule",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from \"@angular/core\";\r\nimport { CalendarDataType, Days, Module } from \"../../models/plan/types\";\r\nimport { b64toBlob } from \"../../utils/img-utils\";\r\nimport { TEST_IMAGE } from \"../../testing/mocks/test-image-base64\";\r\nimport { Guid } from \"guid-typescript\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class ModuleService {\r\n  private modules = signal<Module[]>([\r\n    {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      //@ts-ignore\r\n      id: Guid.create().value,\r\n      image: { data: b64toBlob(TEST_IMAGE), filename: \"big-biceps\" },\r\n      title: \"I the big biceps\",\r\n      text: \"I wish I was a big biceps\"\r\n    }\r\n  ]);\r\n\r\n  private CalendarData = signal<CalendarDataType>({\r\n    Monday: [],\r\n    Tuesday: [],\r\n    Wednesday: [],\r\n    Thursday: [],\r\n    Friday: [],\r\n    Saturday: [],\r\n    Sunday: []\r\n  });\r\n\r\n  public getModules = () => this.modules();\r\n\r\n  public addModule = (value: Module) =>\r\n    this.modules.mutate(modules => modules.push(value));\r\n\r\n  public deleteModule = (id: Guid) =>\r\n    this.modules.update(modules => modules.filter(module => module.id !== id));\r\n\r\n  public updateModule = (nextValue: Module) => {\r\n    const index = this.getModules().findIndex(m => m.id === nextValue.id);\r\n\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n\r\n    this.modules.mutate(modules => {\r\n      modules[index] = nextValue;\r\n\r\n      return modules;\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  public getCalendarData = () => this.CalendarData();\r\n\r\n  public setCalendarData = (module: Module, day: Days) =>\r\n    this.CalendarData.mutate(data => {\r\n      if (!data[day].some(x => x.id === module.id)) {\r\n        data[day].push(module);\r\n      }\r\n    });\r\n\r\n  public removeCalendarData = (id: Guid, day: Days) =>\r\n    this.CalendarData.update(data => {\r\n      const module = data[day].filter(x => x.id !== id);\r\n\r\n      return { ...data, [day]: module };\r\n    });\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModuleStoreService",
            "id": "injectable-ModuleStoreService-cce5d90ebb082e7c9e07dbc271fc507c67445800e0e4b27d8a0784679767175674314edf56711d21ceb2904d8ebd20aed6b30591dc7a294ce74bedc186b3828a",
            "file": "src/app/plan/services/module.store.service.ts",
            "properties": [
                {
                    "name": "modules$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Module[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "FitnessPlanState.getModules"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "subscriptionModules$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "module",
                            "type": "Module",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "Module",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "module",
                            "type": "Module",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "Module",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Select, Store } from \"@ngxs/store\";\nimport {\n  AddModule,\n  DeleteModule,\n  GetFitnessPlanData,\n  UpdateModule\n} from \"../../states/actions/fitness-plan-state-actions\";\nimport { Module } from \"../../models/plan/types\";\nimport { FitnessPlanState } from \"../../states/state/fitness-plan-state\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { toSignal } from \"@angular/core/rxjs-interop\";\nimport { Guid } from \"guid-typescript\";\n\n@Injectable()\nexport class ModuleStoreService {\n  @Select(FitnessPlanState.getModules)\n  private modules$: Observable<Module[]>;\n  private subscriptionModules$: Subscription | null = null;\n\n  constructor(private readonly store: Store) {\n    this.store.dispatch(new GetFitnessPlanData());\n  }\n\n  public getAll() {\n    return toSignal(this.modules$);\n  }\n\n  public add(module: Module) {\n    this.store.dispatch(new AddModule(module));\n  }\n\n  public delete(id: Guid) {\n    this.store.dispatch(new DeleteModule(id));\n  }\n\n  public update(module: Module) {\n    this.store.dispatch(new UpdateModule(module));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AddModule",
            "id": "class-AddModule-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Add Module\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIErrorResponse",
            "id": "class-APIErrorResponse-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] API Error Response\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APISuccessResponse",
            "id": "class-APISuccessResponse-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] API Success Response\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseApiService",
            "id": "class-BaseApiService-96154654636318607910d0977de0e44785a975acfeba04cd80e3a026ca3739ae569ed0e5adc12116d0a3f3a381cb08be7c985b36c81fb820496c1e1809a926e4",
            "file": "src/app/api/services/base.api.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiBasePath } from \"../endpoints\";\nimport { ModuleBE } from \"../../models/plan/types\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { Guid } from \"guid-typescript\";\n\nexport class BaseApiService<T extends ApiBasePath> {\n  protected readonly httpClient: HttpClient = inject(HttpClient);\n\n  constructor(private readonly apiPath: T) {}\n\n  public getAll() {\n    return this.httpClient.get(this.apiPath.getAll());\n  }\n\n  public get(id: Guid) {\n    return this.httpClient.get(this.apiPath.get(id));\n  }\n\n  public add(module: ModuleBE) {\n    return this.httpClient.post(this.apiPath.add(), module);\n  }\n\n  public update(module: ModuleBE) {\n    return this.httpClient.put(this.apiPath.update(), module);\n  }\n\n  public delete(id: Guid) {\n    return this.httpClient.delete(this.apiPath.delete(id));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiPath",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "apiPath",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "httpClient",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleBE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteModule",
            "id": "class-DeleteModule-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Delete Module\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetFitnessPlanData",
            "id": "class-GetFitnessPlanData-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Get Fitness plan data\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemoveCalendarData",
            "id": "class-RemoveCalendarData-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "day",
                        "type": "Days",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Guid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "day",
                        "type": "Days",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Days",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guid",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Remove Calendar Data\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetCalendarData",
            "id": "class-SetCalendarData-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "day",
                        "type": "Days",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "day",
                        "type": "Days",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Days",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Set Calendar Data\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateModule",
            "id": "class-UpdateModule-7b5e2e70b66691d052d46d5596dfeaba9d3bc361edbe4d63dc090f5f0227aefb092c378f91accd7f29e53ad4e3e78a12fe201eaeb0dafefc36d5e0adb9265f5a",
            "file": "src/app/states/actions/fitness-plan-state-actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Days, Module } from \"../../models/plan/types\";\nimport { Guid } from \"guid-typescript\";\n\nexport class AddModule {\n  static readonly type = \"[FitnessPlan] Add Module\";\n\n  constructor(public readonly module: Module) {}\n}\nexport class DeleteModule {\n  static readonly type = \"[FitnessPlan] Delete Module\";\n\n  constructor(public id: Guid) {}\n}\n\nexport class UpdateModule {\n  static readonly type = \"[FitnessPlan] Update Module\";\n\n  constructor(public readonly nextModule: Module) {}\n}\n\nexport class SetCalendarData {\n  static readonly type = \"[FitnessPlan] Set Calendar Data\";\n\n  constructor(\n    public readonly module: Module,\n    public readonly day: Days\n  ) {}\n}\n\nexport class RemoveCalendarData {\n  static readonly type = \"[FitnessPlan] Remove Calendar Data\";\n\n  constructor(\n    public readonly id: Guid,\n    public readonly day: Days\n  ) {}\n}\n\nexport class APISuccessResponse<T> {\n  static readonly type = \"[FitnessPlan] API Success Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class APIErrorResponse<T> {\n  static readonly type = \"[FitnessPlan] API Error Response\";\n\n  constructor(public readonly data: T) {}\n}\n\nexport class GetFitnessPlanData {\n  static readonly type = \"[FitnessPlan] Get Fitness plan data\";\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nextModule",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "nextModule",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "nextModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"[FitnessPlan] Update Module\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActivityFormComponent",
            "id": "component-ActivityFormComponent-d20d32d0057c3cd6afced3e60ba6a0fc4d741aa6cf6f181fa15cdee1513a7fc40545b686039ed2989ecb3443b64c187757c61b45a2198c4fa2bc38861c023a16",
            "file": "src/app/activity-form/activity-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-form",
            "styleUrls": [
                "./activity-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Module | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submitted",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activityForm",
                    "defaultValue": "this.formBuilder.group({\n    title: this.formBuilder.control<string>(\"\", Validators.required),\n    image: this.formBuilder.control<{ filename: string; data: Blob } | null>(\n      null,\n      Validators.required\n    ),\n    text: this.formBuilder.control<string>(\"\", Validators.required)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onImageUploaded",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Module } from \"../models/plan/types\";\nimport { Store } from \"@ngxs/store\";\nimport {\n  AddModule,\n  UpdateModule\n} from \"../states/actions/fitness-plan-state-actions\";\nimport { Guid } from \"guid-typescript\";\n\n@Component({\n  selector: \"app-activity-form\",\n  templateUrl: \"./activity-form.component.html\",\n  styleUrls: [\"./activity-form.component.scss\"]\n})\nexport class ActivityFormComponent implements OnInit {\n  @Input()\n  module: Module | null = null;\n  @Output() submitted = new EventEmitter<boolean>();\n\n  private isEdit = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private store: Store\n  ) {}\n\n  public ngOnInit() {\n    this.activityForm.patchValue({\n      text: this.module?.text || \"\",\n      title: this.module?.title || \"\",\n      image: this.module?.image || null\n    });\n\n    this.isEdit = this.module !== null;\n  }\n\n  public activityForm = this.formBuilder.group({\n    title: this.formBuilder.control<string>(\"\", Validators.required),\n    image: this.formBuilder.control<{ filename: string; data: Blob } | null>(\n      null,\n      Validators.required\n    ),\n    text: this.formBuilder.control<string>(\"\", Validators.required)\n  });\n\n  public onSubmit() {\n    const module = {\n      ...this.activityForm.value,\n      // I really love community packages...\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      id: this.isEdit ? this.module?.id : Guid.create().value\n    } as Module;\n\n    if (this.isEdit) {\n      try {\n        this.store.dispatch(new UpdateModule(module));\n        this.submitted.emit(true);\n      } catch (e) {\n        this.submitted.emit(false);\n      }\n\n      return;\n    }\n\n    this.store.dispatch(new AddModule(module));\n    this.submitted.emit(true);\n  }\n\n  public async onImageUploaded(event: Event) {\n    const file = (event.target as HTMLInputElement).files?.[0];\n    if (!file) {\n      return;\n    }\n\n    this.activityForm.get(\"image\")?.patchValue({\n      filename: file.name,\n      data: new Blob([file], { type: \"image/png\" })\n    });\n  }\n\n  public deleteImage() {\n    this.activityForm.get(\"image\")?.patchValue(null);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".new-activity-form {\n  display: flex;\n  flex-direction: column;\n\n  input,\n  textarea {\n    max-width: 15rem;\n    margin-bottom: 0.5rem;\n  }\n\n  button {\n    max-width: fit-content;\n    padding: 0.1rem 0.5rem 0.1rem 0.5rem;\n  }\n\n  .invalid {\n    color: red;\n  }\n\n  .selected-image {\n    display: flex;\n    align-items: center;\n\n    button {\n      margin-left: 1rem;\n\n      height: fit-content;\n    }\n  }\n}\n",
                    "styleUrl": "./activity-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\n  class=\"new-activity-form\"\n  action=\"\"\n  [formGroup]=\"activityForm\"\n  (ngSubmit)=\"onSubmit()\">\n  <label for=\"title\">Title: </label>\n  <input id=\"title\" type=\"text\" formControlName=\"title\" placeholder=\"title\" />\n  <div\n    *ngIf=\"\n      activityForm.controls.title.invalid && activityForm.controls.title.dirty\n    \"\n    class=\"invalid\">\n    Field is required\n  </div>\n\n  <label for=\"image\">Image: </label>\n  <input\n    *ngIf=\"activityForm.controls.image.getRawValue() === null\"\n    id=\"image\"\n    accept=\"image/*\"\n    type=\"file\"\n    [textContent]=\"module?.image?.filename\"\n    [files]=\"module?.image?.data\"\n    [value]=\"module?.image?.filename\"\n    (change)=\"onImageUploaded($event)\" />\n  <div\n    *ngIf=\"\n      activityForm.controls.image.invalid && activityForm.controls.image.dirty\n    \"\n    class=\"invalid\">\n    Field is required\n  </div>\n\n  <div\n    class=\"selected-image\"\n    *ngIf=\"activityForm.controls.image.getRawValue()?.filename\">\n    <p>\n      {{ activityForm.controls.image.getRawValue()?.filename }}\n    </p>\n    <button (click)=\"deleteImage()\">X</button>\n  </div>\n\n  <label for=\"text\">Summary: </label>\n  <textarea\n    id=\"text\"\n    formControlName=\"text\"\n    rows=\"4\"\n    placeholder=\"description\"></textarea>\n  <div\n    *ngIf=\"\n      activityForm.controls.text.invalid && activityForm.controls.text.dirty\n    \"\n    class=\"invalid\">\n    Field is required\n  </div>\n\n  <button type=\"submit\" [disabled]=\"!activityForm.valid\">Add</button>\n</form>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-da263784522a35bd3044282544779cc16176cde7dba93e249f8476f4dbfa79f18fc03af38673f7274a0b2c5ea5d7f540f8729a760467d1e3773bab5a8e45e139",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "NAV_BAR_BUTTONS",
                    "defaultValue": "[\r\n    {\r\n      text: \"Plan\",\r\n      redirectUrl: \"/plan\"\r\n    },\r\n    {\r\n      text: \"List of activities\",\r\n      redirectUrl: \"/activities\"\r\n    },\r\n    {\r\n      text: \"Add activity\",\r\n      redirectUrl: \"/activity-form\"\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeaderNavBarButton[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { HeaderNavBarButton } from \"../stories/header.component.types\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class AppComponent {\r\n  readonly NAV_BAR_BUTTONS: HeaderNavBarButton[] = [\r\n    {\r\n      text: \"Plan\",\r\n      redirectUrl: \"/plan\"\r\n    },\r\n    {\r\n      text: \"List of activities\",\r\n      redirectUrl: \"/activities\"\r\n    },\r\n    {\r\n      text: \"Add activity\",\r\n      redirectUrl: \"/activity-form\"\r\n    }\r\n  ];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<storybook-header\r\n  data-testid=\"app-header\"\r\n  title=\"Fitness Planner\"\r\n  [navBarButtons]=\"NAV_BAR_BUTTONS\" />\r\n<router-outlet />\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "EditActivityModalComponent",
            "id": "component-EditActivityModalComponent-006454d6d873866b68fd24f4fecafd113b7d6eb97aa9a05454ccaea124a06bd0af63f1c8e278be9205e647b58fb86e16267ef0930fd91e6e002441ed4205ae17",
            "file": "src/app/list-of-activities/edit-activity-modal/edit-activity-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-activity-modal",
            "styleUrls": [
                "./edit-activity-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-activity-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "wasSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmitted",
                    "args": [
                        {
                            "name": "result",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { Module } from \"../../models/plan/types\";\r\n\r\n@Component({\r\n  selector: \"app-edit-activity-modal\",\r\n  templateUrl: \"./edit-activity-modal.component.html\",\r\n  styleUrls: [\"./edit-activity-modal.component.scss\"]\r\n})\r\nexport class EditActivityModalComponent {\r\n  public wasSuccessful = false;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public module: Module) {}\r\n\r\n  public onSubmitted(result: boolean) {\r\n    this.wasSuccessful = result;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-activity-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "module",
                        "type": "Module",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1 mat-dialog-title>Edit Module:</h1>\n\n<div mat-dialog-content>\n  <app-activity-form [module]=\"module\" (submitted)=\"onSubmitted($event)\" />\n</div>\n<div mat-dialog-actions>\n  <button mat-button [mat-dialog-close]=\"wasSuccessful\">Close</button>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-85d6f242606a79a6f67e61d573a39b1cc8cd2a289bf6300c1d7c27e74bdc726202969adec54478523eac28eccf97497ca8eadd7a69578611b85850fe704d83b6",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navBarButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "HeaderNavBarButton[]",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "title",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "navButtonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterTestingModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport type { HeaderNavBarButton } from \"./header.component.types\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterTestingModule } from \"@angular/router/testing\";\n\n@Component({\n  selector: \"storybook-header\",\n  standalone: true,\n  templateUrl: \"./header.component.html\",\n  imports: [CommonModule, RouterTestingModule],\n  styleUrls: [\"./header.component.scss\"]\n})\nexport class HeaderComponent {\n  @Input({ required: true }) title = \"\";\n  @Input() navBarButtons: HeaderNavBarButton[] = [];\n\n  @Output()\n  navButtonClick = new EventEmitter();\n\n  public onClick($event: MouseEvent) {\n    this.navButtonClick.emit($event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-container {\r\n  border-radius: 8px;\r\n  background-color: rgba(66, 201, 174, 0.76);\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .header-logo {\r\n    width: 60px;\r\n    height: auto;\r\n  }\r\n\r\n  h1 {\r\n    margin-right: 3rem;\r\n  }\r\n\r\n  button {\r\n    padding: 1rem;\r\n    border: none;\r\n    margin: 0.2rem;\r\n\r\n    background-color: rgba(111, 214, 193, 0.66);\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n      border-radius: 8px;\r\n      border-color: rgb(227, 125, 50);\r\n      background-color: rgb(227, 125, 50);\r\n    }\r\n  }\r\n\r\n  * {\r\n    margin: 0 0.5rem 0 0.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"header-container\">\n  <img class=\"header-logo\" src=\"../../assets/img/logo.png\" alt=\"\" />\n  <h1 routerLink=\"/\">{{ title }}</h1>\n\n  <div *ngFor=\"let button of navBarButtons\">\n    <button (click)=\"onClick($event)\" [routerLink]=\"button.redirectUrl\">\n      {{ button.text }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "ListOfActivitiesComponent",
            "id": "component-ListOfActivitiesComponent-b46ca979c54d0356c7a0e169fced4539c8102e1811c3cb5615a385c5c14072c1e6e2e8e4ca76f571e9a66abc40e8c9c4381861182f43434b1bb3ec23585bd5ac",
            "file": "src/app/list-of-activities/list-of-activities.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-of-activities",
            "styleUrls": [
                "./list-of-activities.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-of-activities.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\"name\", \"detail\", \"filename\", \"actions\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<Module[]>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteModule",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editModule",
                    "args": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Guid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Signal } from \"@angular/core\";\r\nimport { Module } from \"../models/plan/types\";\r\nimport { EditActivityModalComponent } from \"./edit-activity-modal/edit-activity-modal.component\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { DeleteModule } from \"../states/actions/fitness-plan-state-actions\";\r\nimport { ModuleStoreService } from \"../plan/services/module.store.service\";\r\nimport { Store } from \"@ngxs/store\";\r\nimport { Guid } from \"guid-typescript\";\r\n\r\n@Component({\r\n  selector: \"app-list-of-activities\",\r\n  templateUrl: \"./list-of-activities.component.html\",\r\n  styleUrls: [\"./list-of-activities.component.scss\"]\r\n})\r\nexport class ListOfActivitiesComponent {\r\n  public tableData: Signal<Module[]>;\r\n  displayedColumns = [\"name\", \"detail\", \"filename\", \"actions\"];\r\n\r\n  constructor(\r\n    private readonly store: Store,\r\n    private readonly moduleStoreService: ModuleStoreService,\r\n    private readonly editModal: MatDialog\r\n  ) {\r\n    this.tableData = this.moduleStoreService.getAll();\r\n  }\r\n\r\n  public editModule(id: Guid) {\r\n    this.editModal.open(EditActivityModalComponent, {\r\n      data: this.tableData().find(module => module.id === id)\r\n    });\r\n  }\r\n\r\n  public deleteModule(id: Guid) {\r\n    this.store.dispatch(new DeleteModule(id));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-of-activities.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moduleStoreService",
                        "type": "ModuleStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "editModal",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moduleStoreService",
                        "type": "ModuleStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editModal",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<table mat-table matSort [dataSource]=\"tableData()\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell mat-sort-header *matHeaderCellDef>Name:</th>\n    <td mat-cell *matCellDef=\"let module\">{{ module.title }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"detail\">\n    <th mat-header-cell mat-sort-header *matHeaderCellDef>Detail:</th>\n    <td mat-cell *matCellDef=\"let module\">{{ module.text }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"filename\">\n    <th mat-header-cell mat-sort-header *matHeaderCellDef>Filename:</th>\n    <td mat-cell *matCellDef=\"let module\">{{ module.image.filename }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"actions\">\n    <th mat-header-cell mat-sort-header *matHeaderCellDef>Actions:</th>\n    <td mat-cell *matCellDef=\"let module\">\n      <Button (click)=\"editModule(module.id)\">Edit</Button>\n      <Button (click)=\"deleteModule(module.id)\">Delete</Button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-0856dfb3a21bd986f1299509d9efa6be9dc8e0cbc9305f0a353febb9c516e13805b454c25f0fe105f7e89ca95351bdd114ff4865f19c872d2572b943e244c1ea",
            "file": "src/app/plan/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<Module[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "moduleTrackBy",
                    "defaultValue": "moduleTrackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Signal } from \"@angular/core\";\r\nimport { Module } from \"../../models/plan/types\";\r\nimport { moduleTrackBy } from \"../module/helpers/module.helper\";\r\nimport { ModuleStoreService } from \"../services/module.store.service\";\r\n\r\n@Component({\r\n  selector: \"app-menu\",\r\n  templateUrl: \"./menu.component.html\",\r\n  styleUrls: [\"./menu.component.scss\"]\r\n})\r\nexport class MenuComponent {\r\n  public modules: Signal<Module[]>;\r\n\r\n  constructor(private readonly moduleStoreService: ModuleStoreService) {\r\n    this.modules = this.moduleStoreService.getAll();\r\n  }\r\n\r\n  protected readonly moduleTrackBy = moduleTrackBy;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plan-menu {\n  padding: 0.5rem 0.5rem 0.5rem 0;\n  display: flex;\n  flex-direction: column;\n  width: 15rem;\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "moduleStoreService",
                        "type": "ModuleStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "moduleStoreService",
                        "type": "ModuleStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"plan-menu\" cdkDropList>\n  <app-module\n    *ngFor=\"let module of modules(); trackBy: moduleTrackBy\"\n    [id]=\"module.id\"\n    [text]=\"module.text\"\n    [title]=\"module.title\"\n    [image]=\"module.image\" />\n</div>\n"
        },
        {
            "name": "ModuleComponent",
            "id": "component-ModuleComponent-37323c31791a4794b3ca5bf2f9c1fe631121dd6277db51298a87c5141933f4789158fd73bfe5bc78fb88365f85cd47b7a046d9ecf1ccb4a08a858838a0d15ba3",
            "file": "src/app/plan/module/module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-module",
            "styleUrls": [
                "./module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Days",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "Guid",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 16,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "module",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\nimport { Days, Module } from \"../../models/plan/types\";\nimport { Store } from \"@ngxs/store\";\nimport { RemoveCalendarData } from \"../../states/actions/fitness-plan-state-actions\";\nimport { Guid } from \"guid-typescript\";\n\n@Component({\n  selector: \"app-module\",\n  templateUrl: \"./module.component.html\",\n  styleUrls: [\"./module.component.scss\"]\n})\nexport class ModuleComponent implements OnInit {\n  @Input({ transform: (value: string): Days => value as Days }) day?: Days;\n  @Input({ required: true }) id?: Guid;\n  @Input({ required: true }) title!: string;\n  @Input({ required: true }) image!: { filename: string; data: Blob };\n  @Input() text!: string;\n\n  public imageUrl: string | null = null;\n  public module: Module | null = null;\n  constructor(private store: Store) {}\n\n  public ngOnInit() {\n    if (!(this.image.data instanceof Blob)) {\n      return;\n    }\n\n    this.imageUrl = URL.createObjectURL(this.image.data);\n    this.module = {\n      id: this.id,\n      image: this.image,\n      text: this.text,\n      title: this.title\n    };\n  }\n\n  public onDelete() {\n    if (!this.day || !this.id) {\n      return;\n    }\n\n    this.store.dispatch(new RemoveCalendarData(this.id, this.day));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".module-container {\n  padding: 0.5rem;\n  border-radius: 8px;\n  border: solid #6ed4bf 2px;\n  box-shadow: black 3px 3px 3px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.5rem;\n  width: 15rem;\n  height: 10rem;\n\n  span {\n    margin-left: auto;\n  }\n\n  h3 {\n    text-align: center;\n  }\n\n  .module-image {\n    object-fit: scale-down;\n    margin: 0 0.5rem 0.5rem 0;\n    max-width: 5rem;\n    height: auto;\n    float: left;\n  }\n\n  div {\n    overflow-wrap: anywhere;\n    white-space: break-spaces;\n  }\n}\n",
                    "styleUrl": "./module.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"module-container\" cdkDrag [cdkDragData]=\"module\">\r\n  <span tabindex=\"0\" *ngIf=\"day\" (click)=\"onDelete()\" (keyup)=\"onDelete()\">\r\n    X\r\n  </span>\r\n  <h3 data-testid=\"module-title\">{{ title }}</h3>\r\n  <div>\r\n    <img\r\n      class=\"module-image\"\r\n      data-testid=\"module-image\"\r\n      [src]=\"imageUrl\"\r\n      alt=\"fitness-image\" />\r\n    <div data-testid=\"module-text\">{{ text }}</div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PlanComponent",
            "id": "component-PlanComponent-af1ecc66c3d3ab83033aa82c1ca0f343d0184e8d70e0635c8ca849f8a0ced804041c0cc9cbd11845763b10af5021cd0213d85a642a67f896024bfdcf11c3a6c7",
            "file": "src/app/plan/plan.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan",
            "styleUrls": [
                "./plan.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarData",
                    "defaultValue": "{\n    Friday: [],\n    Monday: [],\n    Saturday: [],\n    Sunday: [],\n    Thursday: [],\n    Tuesday: [],\n    Wednesday: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarDataType",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "calendarData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CalendarDataType>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "FitnessPlanState.getCalendarData"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "dayTrackBy",
                    "defaultValue": "dayTrackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "moduleTrackBy",
                    "defaultValue": "moduleTrackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "originalOrder",
                    "defaultValue": "originalOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "subscriptionCalendarData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "item",
                            "type": "CdkDrag",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dayKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CdkDrag",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dayKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { CalendarDataType, Days } from \"../models/plan/types\";\nimport { originalOrder } from \"../utils/sort-utils\";\nimport { CdkDrag } from \"@angular/cdk/drag-drop\";\nimport { Select, Store } from \"@ngxs/store\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { FitnessPlanState } from \"../states/state/fitness-plan-state\";\nimport { SetCalendarData } from \"../states/actions/fitness-plan-state-actions\";\nimport { dayTrackBy, moduleTrackBy } from \"./module/helpers/module.helper\";\n\n@Component({\n  selector: \"app-plan\",\n  templateUrl: \"./plan.component.html\",\n  styleUrls: [\"./plan.component.scss\"]\n})\nexport class PlanComponent implements OnInit, OnDestroy {\n  protected readonly originalOrder = originalOrder;\n\n  public calendarData: CalendarDataType = {\n    Friday: [],\n    Monday: [],\n    Saturday: [],\n    Sunday: [],\n    Thursday: [],\n    Tuesday: [],\n    Wednesday: []\n  };\n\n  @Select(FitnessPlanState.getCalendarData)\n  private calendarData$: Observable<CalendarDataType>;\n  private subscriptionCalendarData: Subscription | null = null;\n\n  constructor(private readonly store: Store) {\n    // effect(() => {\n    //   this.calendarData = this.moduleService.getCalendarData();\n    // });\n  }\n\n  public ngOnInit() {\n    this.subscriptionCalendarData =\n      this.calendarData$?.subscribe({\n        next: calendarData => (this.calendarData = calendarData),\n        error: err => console.error(err)\n      }) ?? null;\n  }\n\n  public ngOnDestroy() {\n    this.subscriptionCalendarData?.unsubscribe();\n  }\n\n  public onDrop(item: CdkDrag, dayKey: string) {\n    this.store.dispatch(new SetCalendarData(item.data, dayKey as Days));\n  }\n\n  protected readonly dayTrackBy = dayTrackBy;\n  protected readonly moduleTrackBy = moduleTrackBy;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plan-container {\n  display: flex;\n  height: 100%;\n\n  .plan-day-container {\n    margin-top: 0.5rem;\n    overflow: auto;\n    height: 100%;\n\n    .plan-day-overflow-container {\n      display: flex;\n      width: max-content;\n\n      .plan-day {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        border-left: 1px solid black;\n        border-right: 1px solid black;\n        width: 18rem;\n        // TODO: implement proper height\n        height: 90vh;\n        margin: 0 1rem 0 1rem;\n\n        hr {\n          width: 90%;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./plan.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"plan-container\" cdkDropListGroup>\n  <app-menu />\n\n  <div class=\"plan-day-container\">\n    <div class=\"plan-day-overflow-container\">\n      <!--TODO: fix types-->\n      <div\n        class=\"plan-day\"\n        cdkDropList\n        (cdkDropListDropped)=\"onDrop($event.item, day.key)\"\n        *ngFor=\"\n          let day of calendarData | keyvalue: originalOrder;\n          trackBy: dayTrackBy\n        \"\n        [cdkDropListData]=\"day.value\">\n        <h2>{{ day.key }}</h2>\n        <hr />\n        <app-module\n          *ngFor=\"let module of day.value; trackBy: moduleTrackBy\"\n          [day]=\"day.key\"\n          [id]=\"module.id\"\n          [title]=\"module.title\"\n          [text]=\"module.text\"\n          [image]=\"module.image\" />\n      </div>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-0a0906ec8207bef50f9a3ed4fd58e455deb3008dfb4f39d7cadbb9bec9c95188d5d7ec1fc34f4e80d432a4cbc1405647af38efd50c4d6844dc347fee2a26407c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/api/api.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ModuleApiService } from \"./services/module.api.service\";\nimport { CalendarApiService } from \"./services/calendar.api.service\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HttpClientModule],\n  providers: [ModuleApiService, CalendarApiService]\n})\nexport class ApiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CalendarApiService"
                        },
                        {
                            "name": "ModuleApiService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-b934a82f3d2757caa6d04597b4cd62f5132d2f62e751764725a85276ca30bedaecc6a40e7a005e31feaf474a2ded6bf5b96bcfa9f681ee7960c148ea1c1ba588",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { ActivityFormComponent } from \"./activity-form/activity-form.component\";\r\nimport { PlanModule } from \"./plan/plan.module\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { ListOfActivitiesComponent } from \"./list-of-activities/list-of-activities.component\";\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { EditActivityModalComponent } from \"./list-of-activities/edit-activity-modal/edit-activity-modal.component\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { NgxsModule } from \"@ngxs/store\";\r\nimport { FitnessPlanState } from \"./states/state/fitness-plan-state\";\r\nimport { ApiModule } from \"./api/api.module\";\r\nimport { HeaderComponent } from \"../stories/header.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ActivityFormComponent,\r\n    ListOfActivitiesComponent,\r\n    EditActivityModalComponent\r\n  ],\r\n  imports: [\r\n    ApiModule,\r\n    NgxsModule.forRoot([FitnessPlanState]),\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    PlanModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    HeaderComponent\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityFormComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "EditActivityModalComponent"
                        },
                        {
                            "name": "ListOfActivitiesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "PlanModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-548137539a1aff01af9f975ec67b6eb29835353be0d5fd72cc64f1c969482200de5a6ecff32959b388997369d005a009f089ba7824dfaf9747faad763d0e9f28",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { PlanComponent } from \"./plan/plan.component\";\nimport { ActivityFormComponent } from \"./activity-form/activity-form.component\";\nimport { ListOfActivitiesComponent } from \"./list-of-activities/list-of-activities.component\";\n\nconst routes: Routes = [\n  { path: \"\", redirectTo: \"plan\", pathMatch: \"full\" },\n  { path: \"plan\", component: PlanComponent },\n  { path: \"activities\", component: ListOfActivitiesComponent },\n  { path: \"activity-form\", component: ActivityFormComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlanModule",
            "id": "module-PlanModule-77ebd899daec10f71acdf9a17d147d4034765dbb630c4d43827c3a1cefd28a2b8f9e1e5be8a9ec579a930117fc30ce6dbf478798775a9298a91e51f80ebb27cb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/plan/plan.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule, NgOptimizedImage } from \"@angular/common\";\nimport { PlanComponent } from \"./plan.component\";\nimport { MenuComponent } from \"./menu/menu.component\";\nimport { ModuleComponent } from \"./module/module.component\";\nimport { CdkDrag, CdkDropList, CdkDropListGroup } from \"@angular/cdk/drag-drop\";\nimport { ModuleStoreService } from \"./services/module.store.service\";\n\n@NgModule({\n  declarations: [PlanComponent, MenuComponent, ModuleComponent],\n  imports: [\n    CommonModule,\n    NgOptimizedImage,\n    CdkDrag,\n    CdkDropList,\n    CdkDropListGroup\n  ],\n  providers: [ModuleStoreService]\n})\nexport class PlanModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ModuleStoreService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "ModuleComponent"
                        },
                        {
                            "name": "PlanComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CdkDrag"
                        },
                        {
                            "name": "CdkDropList"
                        },
                        {
                            "name": "CdkDropListGroup"
                        },
                        {
                            "name": "NgOptimizedImage"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onNavButtonClick: action(\"onNavButtonClick\")\n}"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/endpoints.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"https://localhost:44323/api\""
            },
            {
                "name": "ApiCalendarPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/endpoints.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApiBasePath",
                "defaultValue": "{\n  get: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  create: () => `${API_URL}/Calendar`,\n  delete: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  add: () => `${API_URL}/Calendar`,\n  getAll: () => `${API_URL}/Calendar`,\n  update: () => `${API_URL}/Calendar`\n}"
            },
            {
                "name": "ApiModulePath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/endpoints.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApiBasePath",
                "defaultValue": "{\n  get: (id: Guid) => `${API_URL}/Module/${id}`,\n  create: () => `${API_URL}/Module`,\n  delete: (id: Guid) => `${API_URL}/Module/${id}`,\n  add: () => `${API_URL}/Module`,\n  getAll: () => `${API_URL}/Module`,\n  update: () => `${API_URL}/Module`\n}"
            },
            {
                "name": "b64toBlob",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/img-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  b64Data: string,\n  contentType = \"\",\n  sliceSize = 512\n) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, { type: contentType });\n  return blob;\n}"
            },
            {
                "name": "base64RegExParser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/regex-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(?<=^data:\\w+\\/\\w+;base64,).+/"
            },
            {
                "name": "blobToBase64",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/img-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(blob): Promise<string> =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      return resolve((reader.result as string).match(base64RegExParser)[0]);\n    };\n    reader.readAsDataURL(blob);\n  })"
            },
            {
                "name": "dayTrackBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/module/helpers/module.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(_: number, day: KeyValue<string, Module[]>) =>\n  day.key"
            },
            {
                "name": "Header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { title: \"Header Title\", navBarButtons: [] }\n}"
            },
            {
                "name": "HeaderWithNavBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: \"Header Title\",\n    navBarButtons: [\n      { text: \"First page\", redirectUrl: \"/first\" },\n      { text: \"Second page\", redirectUrl: \"/second\" }\n    ]\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const buttons = canvas.getAllByRole(\"button\");\n\n    await step(\"Click on all buttons\", () => {\n      buttons.forEach(button => {\n        waitFor(() => userEvent.hover(button), { interval: 1000 });\n      });\n    });\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole(\"button\", { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole(\"button\", { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  }\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: \"Example/Header\",\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: [\"autodocs\"],\n  render: (args: HeaderComponent) => ({\n    props: {\n      ...args,\n      navButtonClick: args.navButtonClick\n    },\n    template: `<storybook-header ${argsToTemplate(args)} ></storybook-header>`\n  }),\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: \"fullscreen\"\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: \"Example/Page\",\n  component: PageComponent,\n  render: (args: PageComponent) => ({\n    props: {\n      ...args\n    }\n  }),\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: \"fullscreen\"\n  }\n}"
            },
            {
                "name": "moduleTrackBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/module/helpers/module.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(_: number, module: Module) => module.id"
            },
            {
                "name": "originalOrder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/sort-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): number => {\n  return 0;\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i\n      }\n    }\n  }\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "TEST_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/testing/mocks/test-image-base64.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"\""
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CalendarDataType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<Days | Module[]>",
                "file": "src/app/models/plan/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Days",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"",
                "file": "src/app/models/plan/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "FitnessPlanStateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/models/plan/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "HeaderNavBarButton",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/stories/header.component.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Module",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/models/plan/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ModuleBE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/models/plan/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/header.stories.ts": [
                {
                    "name": "actionData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onNavButtonClick: action(\"onNavButtonClick\")\n}"
                },
                {
                    "name": "Header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { title: \"Header Title\", navBarButtons: [] }\n}"
                },
                {
                    "name": "HeaderWithNavBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: \"Header Title\",\n    navBarButtons: [\n      { text: \"First page\", redirectUrl: \"/first\" },\n      { text: \"Second page\", redirectUrl: \"/second\" }\n    ]\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const buttons = canvas.getAllByRole(\"button\");\n\n    await step(\"Click on all buttons\", () => {\n      buttons.forEach(button => {\n        waitFor(() => userEvent.hover(button), { interval: 1000 });\n      });\n    });\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: \"Example/Header\",\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: [\"autodocs\"],\n  render: (args: HeaderComponent) => ({\n    props: {\n      ...args,\n      navButtonClick: args.navButtonClick\n    },\n    template: `<storybook-header ${argsToTemplate(args)} ></storybook-header>`\n  }),\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: \"fullscreen\"\n  }\n}"
                }
            ],
            "src/app/api/endpoints.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/endpoints.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"https://localhost:44323/api\""
                },
                {
                    "name": "ApiCalendarPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/endpoints.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiBasePath",
                    "defaultValue": "{\n  get: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  create: () => `${API_URL}/Calendar`,\n  delete: (id: Guid) => `${API_URL}/Calendar/${id}`,\n  add: () => `${API_URL}/Calendar`,\n  getAll: () => `${API_URL}/Calendar`,\n  update: () => `${API_URL}/Calendar`\n}"
                },
                {
                    "name": "ApiModulePath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/endpoints.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiBasePath",
                    "defaultValue": "{\n  get: (id: Guid) => `${API_URL}/Module/${id}`,\n  create: () => `${API_URL}/Module`,\n  delete: (id: Guid) => `${API_URL}/Module/${id}`,\n  add: () => `${API_URL}/Module`,\n  getAll: () => `${API_URL}/Module`,\n  update: () => `${API_URL}/Module`\n}"
                }
            ],
            "src/app/utils/img-utils.ts": [
                {
                    "name": "b64toBlob",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/img-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  b64Data: string,\n  contentType = \"\",\n  sliceSize = 512\n) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, { type: contentType });\n  return blob;\n}"
                },
                {
                    "name": "blobToBase64",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/img-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(blob): Promise<string> =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      return resolve((reader.result as string).match(base64RegExParser)[0]);\n    };\n    reader.readAsDataURL(blob);\n  })"
                }
            ],
            "src/app/utils/regex-utils.ts": [
                {
                    "name": "base64RegExParser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/regex-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(?<=^data:\\w+\\/\\w+;base64,).+/"
                }
            ],
            "src/app/plan/module/helpers/module.helper.ts": [
                {
                    "name": "dayTrackBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/module/helpers/module.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(_: number, day: KeyValue<string, Module[]>) =>\n  day.key"
                },
                {
                    "name": "moduleTrackBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/module/helpers/module.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(_: number, module: Module) => module.id"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole(\"button\", { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole(\"button\", { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  }\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: \"Example/Page\",\n  component: PageComponent,\n  render: (args: PageComponent) => ({\n    props: {\n      ...args\n    }\n  }),\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: \"fullscreen\"\n  }\n}"
                }
            ],
            "src/app/utils/sort-utils.ts": [
                {
                    "name": "originalOrder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/sort-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): number => {\n  return 0;\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i\n      }\n    }\n  }\n}"
                }
            ],
            "src/app/testing/mocks/test-image-base64.ts": [
                {
                    "name": "TEST_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/testing/mocks/test-image-base64.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"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\""
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/models/plan/types.ts": [
                {
                    "name": "CalendarDataType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<Days | Module[]>",
                    "file": "src/app/models/plan/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "Days",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"",
                    "file": "src/app/models/plan/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "FitnessPlanStateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/models/plan/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Module",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/models/plan/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ModuleBE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/models/plan/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "src/stories/header.component.types.ts": [
                {
                    "name": "HeaderNavBarButton",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/stories/header.component.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "plan",
                        "pathMatch": "full"
                    },
                    {
                        "path": "plan",
                        "component": "PlanComponent"
                    },
                    {
                        "path": "activities",
                        "component": "ListOfActivitiesComponent"
                    },
                    {
                        "path": "activity-form",
                        "component": "ActivityFormComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/activity-form/activity-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/api/endpoints.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiBasePath",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ApiCalendarPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ApiModulePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/base.api.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/calendar.api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalendarApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/module.api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModuleApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/list-of-activities/edit-activity-modal/edit-activity-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditActivityModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/list-of-activities/list-of-activities.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListOfActivitiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/module/helpers/module.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dayTrackBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/module/helpers/module.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleTrackBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/module/module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/services/module.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModuleService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/services/module.store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModuleStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddModule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APISuccessResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteModule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetFitnessPlanData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemoveCalendarData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetCalendarData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/states/actions/fitness-plan-state-actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateModule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/states/state/fitness-plan-state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FitnessPlanState",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/mocks/test-image-base64.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/img-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "b64toBlob",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/img-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "blobToBase64",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/regex-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base64RegExParser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/sort-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "originalOrder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderWithNavBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}